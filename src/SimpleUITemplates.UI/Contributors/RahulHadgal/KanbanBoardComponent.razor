<style>
    .kanban-board { width:100%; min-height:75vh; height:100%; overflow: hidden }
    .kanban-board .item { display: flex; flex-direction: row; gap: 1rem; padding: 1rem; margin: 0.5rem; border-radius: 1rem; color: black }
    .kanban-board .item h3 { display: flex; place-content: center; place-items: center; background-color: black; color: white; border-radius: 100%; font-weight: normal; width: 48px; height: 48px; }
    .kanban-board .progress { display: block;min-height: 100px;height: fit-content }
    .kanban-board .item-group { border-radius: 1rem;min-height: 100px }
    .kanban-board .backlog { background-image: linear-gradient(45deg,#eee,#ccc) }
    .kanban-board .todo { background-image: linear-gradient(45deg,lightskyblue,royalblue) }
    .kanban-board .wip { background-image: linear-gradient(45deg,lightsalmon,gold) }
    .kanban-board .done { background-image: linear-gradient(45deg,lightgreen,lightseagreen) }
</style>

<Grid MinColWidth="300px" Class="kanban-board">
    <div class="progress">
        <div class="flex-col g0 mb1">
            <h3>Backlogs</h3>
            <p class="muted">Tasks that are not considered yet.</p>
        </div>
        <Sortable Items="@BackLogItems" Group="kanban" Id="backlog" DragClass="item-drag" Sort Register
                  OnChange="HandleChange" OnInsert="HandleInsert" OnDelete="HandleDelete" Class="item-group">
            <SortableItemTemplate>
                <div class="flex item backlog">
                    <h3>@context.Id</h3>
                    <div class="flex-col g4">
                        <b>@context.Title</b>
                        <small>@context.Description</small>
                    </div>
                </div>
            </SortableItemTemplate>
        </Sortable>
    </div>

    <div class="progress">
        <div class="flex-col g0 mb1">
            <h3>ToDo</h3>
            <p class="muted">Tasks yet to be taken up.</p>
        </div>
        <Sortable Items="@ToDoItems" Group="kanban" Id="todo" DragClass="item-drag" Sort Register
                  OnChange="HandleChange" OnInsert="HandleInsert" OnDelete="HandleDelete" Class="item-group">
            <SortableItemTemplate>
                <div class="flex item todo">
                    <h3>@context.Id</h3>
                    <div class="flex-col g4">
                        <b>@context.Title</b>
                        <small>@context.Description</small>
                    </div>
                </div>
            </SortableItemTemplate>
        </Sortable>
    </div>

    <div class="progress">
        <div class="flex-col g0 mb1">
            <h3>WiP</h3>
            <p class="muted">Tasks that are work-in-progress.</p>
        </div>
        <Sortable Items="@WiPItems" Group="kanban" Id="wip" DragClass="item-drag" Sort
                  OnChange="HandleChange" OnInsert="HandleInsert" OnDelete="HandleDelete" Class="item-group">
            <SortableItemTemplate>
                <div class="flex item wip">
                    <h3>@context.Id</h3>
                    <div class="flex-col g4">
                        <b>@context.Title</b>
                        <small>@context.Description</small>
                    </div>
                </div>
            </SortableItemTemplate>
        </Sortable>
    </div>

    <div class="progress">
        <div class="flex-col g0 mb1">
            <h3>Done</h3>
            <p class="muted">Tasks that are complete.</p>
        </div>
        <Sortable Items="@DoneItems" Group="kanban" Id="done" DragClass="item-drag" Sort
                  OnChange="HandleChange" OnInsert="HandleInsert" OnDelete="HandleDelete" Class="item-group">
            <SortableItemTemplate>
                <div class="flex item done">
                    <h3>@context.Id</h3>
                    <div class="flex-col g4">
                        <b>@context.Title</b>
                        <small>@context.Description</small>
                    </div>
                </div>
            </SortableItemTemplate>
        </Sortable>
    </div>
</Grid>

@code
{
    private List<KanbanItem> BackLogItems = [
        new(7, "Deploy UI", "for a small project..."),
        new(8, "Deploy API", "for a small project...")
    ];
    private List<KanbanItem> ToDoItems = [
        new(5, "Test UI", "for a small project..."),
        new(6, "Test API", "for a small project...")
    ];
    private List<KanbanItem> WiPItems = [
        new(3, "Create UI", "for a small project..."),
        new(4, "Create API", "for a small project...")
    ];
    private List<KanbanItem> DoneItems = [
        new(1, "Plan UI", "for a small project..."),
        new(2, "Plan API", "for a small project...")
    ];

    private void HandleChange((int o, int n, string f, string t) index)
    {
        var (oldIndex, newIndex, from, to) = index;
        if (from == "backlog")
        {
            var item = BackLogItems![oldIndex];
            BackLogItems.Remove(item);
            BackLogItems.Insert(newIndex, item);
        }
        else if (from == "todo")
        {
            var item = ToDoItems![oldIndex];
            ToDoItems.Remove(item);
            ToDoItems.Insert(newIndex, item);
        }
        else if (from == "wip")
        {
            var item = WiPItems![oldIndex];
            WiPItems.Remove(item);
            WiPItems.Insert(newIndex, item);
        }
        else if (from == "done")
        {
            var item = DoneItems![oldIndex];
            DoneItems.Remove(item);
            DoneItems.Insert(newIndex, item);
        }
    }

    private void HandleInsert((int o, int n, string f, string t) index)
    {
        var (oldIndex, newIndex, from, to) = index;
        if (from == "backlog")
        {
            if (to == "todo") ToDoItems?.Insert(newIndex, BackLogItems![oldIndex]);
            else if (to == "done") DoneItems?.Insert(newIndex, BackLogItems![oldIndex]);
            else if (to == "wip") WiPItems?.Insert(newIndex, BackLogItems![oldIndex]);
        }
        else if (from == "todo")
        {
            if (to == "backlog") BackLogItems?.Insert(newIndex, ToDoItems![oldIndex]);
            else if (to == "wip") WiPItems?.Insert(newIndex, ToDoItems![oldIndex]);
            else if (to == "done") DoneItems?.Insert(newIndex, ToDoItems![oldIndex]);
        }
        else if (from == "wip")
        {
            if (to == "backlog") BackLogItems?.Insert(newIndex, WiPItems![oldIndex]);
            else if (to == "todo") ToDoItems?.Insert(newIndex, WiPItems![oldIndex]);
            else if (to == "done") DoneItems?.Insert(newIndex, WiPItems![oldIndex]);
        }
        else if (from == "done")
        {
            if (to == "backlog") BackLogItems?.Insert(newIndex, DoneItems![oldIndex]);
            else if (to == "todo") ToDoItems?.Insert(newIndex, DoneItems![oldIndex]);
            else if (to == "wip") WiPItems?.Insert(newIndex, DoneItems![oldIndex]);
        }
    }

    private void HandleDelete((int o, int n, string f, string t) index)
    {
        var (oldIndex, _, from, _) = index;
        if (from == "backlog") BackLogItems?.Remove(BackLogItems[oldIndex]);
        else if (from == "todo") ToDoItems?.Remove(ToDoItems[oldIndex]);
        else if (from == "wip") WiPItems?.Remove(WiPItems[oldIndex]);
        else if (from == "done") DoneItems?.Remove(DoneItems[oldIndex]);
    }

    private record KanbanItem(int Id, string Title, string Description);
}
